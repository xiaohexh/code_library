/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "vos_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kRequestTypeValues[] = {
  RequestType::MARKET_END,
  RequestType::BIZ_END
};
const char* _kRequestTypeNames[] = {
  "MARKET_END",
  "BIZ_END"
};
const std::map<int, const char*> _RequestType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kRequestTypeValues, _kRequestTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


OrderInfo::~OrderInfo() throw() {
}


void OrderInfo::__set_id(const std::string& val) {
  this->id = val;
}

void OrderInfo::__set_flag(const int32_t val) {
  this->flag = val;
}

void OrderInfo::__set_fee(const double val) {
  this->fee = val;
}

void OrderInfo::__set_key(const std::string& val) {
  this->key = val;
}

void OrderInfo::__set_type(const RequestType::type val) {
  this->type = val;
}

uint32_t OrderInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flag);
          this->__isset.flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fee);
          this->__isset.fee = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (RequestType::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrderInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("OrderInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flag", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->flag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fee", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->fee);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrderInfo &a, OrderInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.flag, b.flag);
  swap(a.fee, b.fee);
  swap(a.key, b.key);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

OrderInfo::OrderInfo(const OrderInfo& other1) {
  id = other1.id;
  flag = other1.flag;
  fee = other1.fee;
  key = other1.key;
  type = other1.type;
  __isset = other1.__isset;
}
OrderInfo& OrderInfo::operator=(const OrderInfo& other2) {
  id = other2.id;
  flag = other2.flag;
  fee = other2.fee;
  key = other2.key;
  type = other2.type;
  __isset = other2.__isset;
  return *this;
}
void OrderInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "OrderInfo(";
  out << "id=" << to_string(id);
  out << ", " << "flag=" << to_string(flag);
  out << ", " << "fee=" << to_string(fee);
  out << ", " << "key=" << to_string(key);
  out << ", " << "type=" << to_string(type);
  out << ")";
}


